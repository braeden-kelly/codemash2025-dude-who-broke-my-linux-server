syntax = "proto3";

// Proto packages should match the directory structure in your tree. The version
// suffix is considered best-practice
package employees.v1;

// So the Go output knows its own import path -- this needs to match the output
// directory structure that your protoc invocation creates!
option go_package = "github.com/opensourcecorp/workshops/protobuf-grpc/pb/employees/v1";

// Allow for annotations/options to allow for HTTP transcoding of gRPC requests.
// You can spec & gen these just fine without, but you'll need to use the
// grpc-gateway plugin to take advantage of these annotations
import "google/api/annotations.proto";

// Allows us to specify services that need no parameters, e.g. non-paginated
// List() calls, by using google.protobuf.Empty as the parameter type
import "google/protobuf/empty.proto";

// Service that shows a few ways to work with protobufs and gRPC
service EmployeesService {
  rpc GetEmployee(GetEmployeeRequest) returns (GetEmployeeResponse) {
    option (google.api.http) = {
      get: "/employees/v1/get_employee/{short_name}"
    };
  }

  rpc ListEmployees(google.protobuf.Empty) returns (ListEmployeesResponse) {
    option (google.api.http) = {
      get: "/employees/v1/list_employees"
    };
  }
}

message Employee {
  int64 id = 1;
  string full_name = 2;
  string birthday = 3;
}

message GetEmployeeRequest {
  string short_name = 1;
}

message GetEmployeeResponse {
  Employee employee = 1;
}

message ListEmployeesResponse {
  repeated string short_names = 1;
}
